# Standard Library
from typing import Any, Dict, Type, Union

# Django
from django.core.exceptions import ObjectDoesNotExist, ValidationError
from rest_framework import exceptions as drf_exceptions


class ExceptionHandlerMixin:
    """
    Mixin designed to translate common Python exceptions into DRF exceptions
    for consistent API error responses. It maps standard Python exceptions to
    Django Rest Framework's exceptions.
    """

    exception_mapping: Dict[Type[Exception], Type[drf_exceptions.APIException]] = {
        AssertionError: drf_exceptions.APIException,
        ValueError: drf_exceptions.ValidationError,
        PermissionError: drf_exceptions.PermissionDenied,
        ObjectDoesNotExist: drf_exceptions.NotFound,
        ValidationError: drf_exceptions.ValidationError,
    }

    def translate_exception(self, exc: Exception) -> Union[drf_exceptions.APIException, Exception]:
        """
        Translate exceptions based on the mapping to the corresponding DRF exception.

        Args:
            exc (Exception): The exception instance to translate.

        Returns:
            Union[drf_exceptions.APIException, Exception]: The translated DRF
            exception or the original exception if no translation is defined.
        """
        for base_exception in exc.__class__.__mro__[:-1]:
            matching_drf_exception = self.exception_mapping.get(base_exception)
            if matching_drf_exception:
                return matching_drf_exception(detail=self.extract_error_message(exc))

        return exc

    def handle_exception(self, exc: Exception) -> Any:
        """
        Overrides the default exception handling to translate exceptions and then
        defer to DRF's default exception handling.

        Args:
            exc (Exception): The exception encountered during view execution.

        Returns:
            Any: The response generated by DRF's default exception handler.
        """
        translated_exception = self.translate_exception(exc)
        return super().handle_exception(translated_exception)

    def extract_error_message(self, exc: Exception) -> str:
        """
        Extracts a human-readable error message from the exception.

        Args:
            exc (Exception): The exception from which to extract the message.

        Returns:
            str: A human-readable message describing the error.
        """
        message = self.find_attribute_in_exception(
            exc, "message_dict", "message", "messages", default=str(exc)
        )
        if isinstance(message, list):
            message = ", ".join(message)
        return message

    @staticmethod
    def find_attribute_in_exception(exc: Exception, *attrs, default: Any = None) -> Any:
        """
        Searches for the first matching attribute in the exception instance.

        Args:
            exc (Exception): The exception instance to search.
            *attrs: Variable length attribute names to search for.
            default (Any, optional): The default value to return if
            no attributes match.

        Returns:
            Any: The value of the first matching attribute, or the default value.
        """
        for attribute in attrs:
            if hasattr(exc, attribute):
                return getattr(exc, attribute)
        return default
